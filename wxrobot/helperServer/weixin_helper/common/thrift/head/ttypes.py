#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import common.thrift.define.ttypes

from thrift.transport import TTransport


class WxHead(object):
    """
    Attributes:
     - helperToken
     - deviceInfo
     - ip
     - clientTag
     - appId
     - functionId
     - direction
     - serverTokenId
     - tag
     - mark
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'helperToken', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'deviceInfo', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'ip', 'UTF8', None, ),  # 3
        (4, TType.I32, 'clientTag', None, None, ),  # 4
        (5, TType.I32, 'appId', None, None, ),  # 5
        (6, TType.I32, 'functionId', None, None, ),  # 6
        (7, TType.I32, 'direction', None, None, ),  # 7
        (8, TType.STRING, 'serverTokenId', 'UTF8', None, ),  # 8
        (9, TType.I32, 'tag', None, 1, ),  # 9
        (10, TType.STRING, 'mark', 'UTF8', None, ),  # 10
    )

    def __init__(self, helperToken=None, deviceInfo=None, ip=None, clientTag=None, appId=None, functionId=None, direction=None, serverTokenId=None, tag=thrift_spec[9][4], mark=None,):
        self.helperToken = helperToken
        self.deviceInfo = deviceInfo
        self.ip = ip
        self.clientTag = clientTag
        self.appId = appId
        self.functionId = functionId
        self.direction = direction
        self.serverTokenId = serverTokenId
        self.tag = tag
        self.mark = mark

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.helperToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.clientTag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.appId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.functionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.serverTokenId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.tag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.mark = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WxHead')
        if self.helperToken is not None:
            oprot.writeFieldBegin('helperToken', TType.STRING, 1)
            oprot.writeString(self.helperToken.encode('utf-8') if sys.version_info[0] == 2 else self.helperToken)
            oprot.writeFieldEnd()
        if self.deviceInfo is not None:
            oprot.writeFieldBegin('deviceInfo', TType.STRING, 2)
            oprot.writeString(self.deviceInfo.encode('utf-8') if sys.version_info[0] == 2 else self.deviceInfo)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 3)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.clientTag is not None:
            oprot.writeFieldBegin('clientTag', TType.I32, 4)
            oprot.writeI32(self.clientTag)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.I32, 5)
            oprot.writeI32(self.appId)
            oprot.writeFieldEnd()
        if self.functionId is not None:
            oprot.writeFieldBegin('functionId', TType.I32, 6)
            oprot.writeI32(self.functionId)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 7)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.serverTokenId is not None:
            oprot.writeFieldBegin('serverTokenId', TType.STRING, 8)
            oprot.writeString(self.serverTokenId.encode('utf-8') if sys.version_info[0] == 2 else self.serverTokenId)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.I32, 9)
            oprot.writeI32(self.tag)
            oprot.writeFieldEnd()
        if self.mark is not None:
            oprot.writeFieldBegin('mark', TType.STRING, 10)
            oprot.writeString(self.mark.encode('utf-8') if sys.version_info[0] == 2 else self.mark)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
